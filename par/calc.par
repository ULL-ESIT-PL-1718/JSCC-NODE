/~
	Expression calculator written in JS/CC (Rhino/Spidermonkey/V8 version)
~/

/~
	--- These are the token definitions ---
~/
!	' |\t' ;		/~ Characters to be ignored... ~/

	'\('			/~ Non-associative tokens ~/
	'\)'
	'[0-9]+'		INT			[* %match = parseInt( %match );	*]
	;

<	'\+'			/~ Left-associative tokens, lowest precedence ~/
	'\-';
	
<	'\*'			/~ Left-associative tokens, highest precedence ~/
	'/';

##

/~
	--- And here's the grammar specification ---
~/

p:	e								[* console.log( %1 );   				*]
	;

/~
	Don't confuse with the tokens:
	Here, we use the unescaped values because these are not
	interpretered as regular expressions at this position!
~/
e: 	e '+' e							[* %% = %1 + %3; 				*]
	| e '-' e						[* %% = %1 - %3; 				*]
	| e '*' e						[* %% = %1 * %3; 				*]
	| e '/' e						[* %% = %1 / %3; 				*]
	| '-' e			&'*'			[* %% = %2 * -1;				*]
	| '(' e ')'						[* %% = %2; 					*]
	| INT
	;

/~
	This is the parser entry point; Because this entry point could be
	very individual, the compiler programmer has to decide which way
	he want to read the source, parse it and report the errors, if
	there are any.
~/
[*
	if(process.argv.length > 2) {
		var str = process.argv;
		delete str[0];
		delete str[1];
		str = str.join(" ");
		var error_cnt = 0;
		var error_off = new Array();
		var error_la = new Array();
	
		if((error_cnt = __##PREFIX##parse(str, error_off, error_la)) > 0) {
		for(var i = 0; i < error_cnt; i++ ) {
			console.log( "Parse error near >" + str.substr( error_off[i], 30 ) + "<, expecting \"" + error_la[i].join() + "\"" );
		}
		}
	}
	else {
		console.log( 'usage: proram <expr>' );
	}
*]
